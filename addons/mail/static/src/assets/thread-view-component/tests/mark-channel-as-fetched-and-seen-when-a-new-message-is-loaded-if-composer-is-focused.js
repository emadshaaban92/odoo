/** @odoo-module **/

import { Define } from '@mail/define';

export default Define`
    {Record/insert}
        [Record/models]
            Test
        [Test/name]
            mark channel as fetched and seen when a new message is loaded if composer is focused
        [Test/model]
            ThreadViewComponent
        [Test/assertions]
            3
        [Test/isFocusRequired]
            true
        [Test/scenario]
            :testEnv
                {Record/insert}
                    [Record/models]
                        Env
            @testEnv
            .{Record/insert}
                []
                    [Record/models]
                        mail.channel
                    [mail.channel/id]
                        100
                []
                    [Record/models]
                        res.partner
                    [res.partner/id]
                        10
                []
                    [Record/models]
                        res.users
                    [res.users/id]
                        10
                    [res.users/partner_id]
                        10
            @testEnv
            .{Record/insert}
                [Record/models]
                    Server
                [Server/data]
                    @record
                    .{Test/data}
                [Server/mockRPC]
                    {Record/insert}
                        [Record/models]
                            Function
                        [Function/in]
                            route
                            args
                            original
                        [Function/out]
                            {if}
                                @args
                                .{Dict/get}
                                    method
                                .{=}
                                    channel_fetched
                                .{&}
                                    @args
                                    .{Dict/get}
                                        args
                                    .{Collection/first}
                                    .{=}
                                        100
                            .{then}
                                {Error/raise}
                                    'channel_fetched' RPC must not be called for created channel as message is directly seen
                            .{elif}
                                @route
                                .{=}
                                    /mail/channel/set_last_seen_message
                            .{then}
                                {Test/assert}
                                    []
                                        @args
                                        .{Dict/get}
                                            channel_id
                                        .{=}
                                            100
                                    []
                                        set_last_seen_message is called on the right channel id
                                {Test/step}
                                    rpc:set_last_seen_message
                            @original
            :thread
                @testEnv
                .{Record/findById}
                    [Thread/id]
                        100
                    [Thread/model]
                        mail.channel
            :threadViewer
                @testEnv
                .{Record/insert}
                    [ThreadViewer/hasThreadView]
                        true
                    [ThreadViewer/thread]
                        @thread
            @testEnv
            .{Record/insert}
                [Record/models]
                    ThreadViewComponent
                [ThreadViewComponent/threadView]
                    @threadViewer
                    .{ThreadViewer/threadView}
            @testEnv
            .{UI/focus}
                @threadViewer
                .{ThreadViewer/threadView}
                .{ThreadView/thread}
                .{Thread/composer}
                .{Composer/composerTextInputComponents}
                .{Collection/first}
                .{ComposerTextInputComponent/textarea}
            {Dev/comment}
                simulate receiving a message
            @testEnv
            .{UI/afterEvent}
                [eventName]
                    o-thread-last-seen-by-current-partner-message-id-changed
                [func]
                    @testEnv
                    .{Env/owlEnv}
                    .{Dict/get}
                        services
                    .{Dict/get}
                        rpc
                    .{Function/call}
                        [route]
                            /mail/chat_post
                        [params]
                            [context]
                                [mockedUserId]
                                    10
                            [message_content]
                                <p>fdsfsd</p>
                            [uuid]
                                @thread
                                .{Thread/uuid}
                [message]
                    should wait until last seen by current partner message id changed after receiving a message while thread is focused
                [predicate]
                    {Record/insert}
                        [Record/models]
                            Function
                        [Function/in]
                            thread
                        [Function/out]
                            @thread
                            .{Thread/id}
                            .{=}
                                100
                            .{&}
                                @thread
                                .{Thread/model}
                                .{=}
                                    mail.channel
            {Test/verifySteps}
                []
                    rpc:channel_seen
                []
                    Channel should have been mark as seen directly
`;
