/** @odoo-module **/

import { Define } from '@mail/define';

export default Define`
    {Record/insert}
        [Record/models]
            Test
        [Test/name]
            message list desc order
        [Test/model]
            ThreadViewComponent
        [Test/assertions]
            5
        [Test/scenario]
            :testEnv
                {Record/insert}
                    [Record/models]
                        Env
            @testEnv
            .{Record/insert}
                []
                    [Record/models]
                        mail.channel
                    [mail.channel/channel_type]
                        channel
                    [mail.channel/id]
                        100
                    [mail.channel/members]
                        [0]
                            @record
                            .{Test/data}
                            .{Data/currentPartnerId}
                        [1]
                            9
                        [2]
                            10
                    [mail.channel/name]
                        General
                    [mail.channel/public]
                        public
                {foreach}
                    {Record/insert}
                        [Record/models]
                            Range
                        [start]
                            0
                        [end]
                            60
                .{do}
                    []
                        [Record/models]
                            mail.message
                        [mail.message/body]
                            not empty
                        [mail.message/model]
                            mail.channel
                        [mail.message/res_id]
                            100
                []
                    [Record/models]
                        res.partner
                    [res.partner/email]
                        john@example.com
                    [res.partner/id]
                        9
                    [res.partner/name]
                        John
                []
                    [Record/models]
                        res.partner
                    [res.partner/email]
                        fred@example.com
                    [res.partner/id]
                        10
                    [res.partner/name]
                        Fred
            @testEnv
            .{Record/insert}
                [Record/models]
                    Server
                [Server/data]
                    @record
                    .{Test/data}
            :thread
                @testEnv
                .{Record/findById}
                    [Thread/id]
                        100
                    [Thread/model]
                        mail.channel
            :threadViewer
                @testEnv
                .{Record/insert}
                    [Record/models]
                        ThreadViewer
                    [ThreadViewer/hasThreadView]
                        true
                    [ThreadViewer/order]
                        desc
                    [ThreadViewer/thread]
                        @thread
            @testEnv
            .{UI/afterEvent}
                [eventName]
                    o-thread-view-hint-processed
                [func]
                    @testEnv
                    .{Record/insert}
                        [Record/models]
                            ThreadViewComponent
                        [ThreadViewComponent/threadView]
                            @threadViewer
                            .{ThreadViewer/threadView}
                [message]
                    should wait until channel 100 loaded initial messages
                [predicate]
                    {Record/insert}
                        [Record/models]
                            Function
                        [Function/in]
                            hint
                            threadViewer
                        [Function/out]
                            @hint
                            .{Hint/type}
                            .{=}
                                messages-loaded
                            .{&}
                                @threadViewer
                                .{ThreadViewer/thread}
                                .{Thread/model}
                                .{=}
                                    mail.channel
                            .{&}
                                @threadViewer
                                .{ThreadViewer/thread}
                                .{Thread/id}
                                .{=}
                                    100
            {Test/assert}
                []
                    @threadViewer
                    .{ThreadViewer/threadView}
                    .{ThreadView/messageListComponents}
                    .{Collection/first}
                    .{MessageListComponent/item}
                    .{Collection/first}
                    .{!=}
                        @threadViewer
                        .{ThreadViewer/threadView}
                        .{ThreadView/messageListComponents}
                        .{Collection/first}
                        .{MessageListComponent/loadMore}
                []
                    load more link should NOT be before messages
            {Test/assert}
                []
                    @threadViewer
                    .{ThreadViewer/threadView}
                    .{ThreadView/messageListComponents}
                    .{Collection/first}
                    .{MessageListComponent/item}
                    .{Collection/last}
                    .{=}
                        @threadViewer
                        .{ThreadViewer/threadView}
                        .{ThreadView/messageListComponents}
                        .{Collection/first}
                        .{MessageListComponent/loadMore}
                []
                    load more link should be after messages
            {Test/assert}
                []
                    @threadViewer
                    .{ThreadViewer/threadView}
                    .{ThreadView/thread}
                    .{Thread/cache}
                    .{ThreadCache/messages}
                    .{Collection/length}
                    .{=}
                        30
                []
                    should have 30 messages at the beginning

            {Dev/comment}
                scroll to bottom
            @testEnv
            .{UI/afterEvent}
                [eventName]
                    o-thread-view-hint-processed
                [func]
                    @testEnv
                    .{Record/update}
                        [0]
                            @threadViewer
                            .{ThreadViewer/threadView}
                            .{ThreadView/messageListComponents}
                            .{Collection/first}
                        [1]
                            [web.Element/scrollTop]
                                @threadViewer
                                .{ThreadViewer/threadView}
                                .{ThreadView/messageListComponents}
                                .{Collection/first}
                                .{web.Element/scrollheight}
                                .{-}
                                    @threadViewer
                                    .{ThreadViewer/threadView}
                                    .{ThreadView/messageListComponents}
                                    .{Collection/first}
                                    .{web.Element/clientHeight}
                [message]
                    should wait until channel 100 loaded more messages after scrolling to bottom
                [predicate]
                    {Record/insert}
                        [Record/models]
                            Function
                        [Function/in]
                            hint
                            threadViewer
                        [Function/out]
                            @hint
                            .{Hint/type}
                            .{=}
                                more-messages-loaded
                            .{&}
                                @threadViewer
                                .{ThreadViewer/thread}
                                .{Thread/model}
                                .{=}
                                    mail.channel
                            .{&}
                                @threadViewer
                                .{ThreadViewer/thread}
                                .{Thread/id}
                                .{=}
                                    100
            {Test/assert}
                []
                    @threadViewer
                    .{ThreadViewer/threadView}
                    .{ThreadView/thread}
                    .{Thread/cache}
                    .{ThreadCache/messages}
                    .{Collection/length}
                    .{=}
                        60
                []
                    should have 60 messages after scrolled to bottom

            @testEnv
            .{Component/afterNextRender}
                @testEnv
                .{Record/update}
                    [0]
                        @threadViewer
                        .{ThreadViewer/threadView}
                        .{ThreadView/messageListComponents}
                        .{Collection/first}
                    [1]
                        [web.Element/scrollTop]
                            0
            {Test/assert}
                []
                    @threadViewer
                    .{ThreadViewer/threadView}
                    .{ThreadView/thread}
                    .{Thread/cache}
                    .{ThreadCache/messages}
                    .{Collection/length}
                    .{=}
                        60
                []
                    scrolling to top should not trigger any message fetching
`;
