/** @odoo-module **/

import { Define } from '@mail/define';

export default Define`
    {Record/insert}
        [Record/models]
            Test
        [Test/name]
            new message chat window should close on selecting the user if chat with the user is already open
        [Test/model]
            ChatWindowManagerComponent
        [Test/assertions]
            2
        [Test/scenario]
            :testEnv
                {Record/insert}
                    [Record/models]
                        Env
            @testEnv
            .{Record/insert}
                [0]
                    [Record/models]
                        mail.channel
                    [mail.channel/channel_type]
                        chat
                    [mail.channel/id]
                        20
                    [mail.channel/is_minimized]
                        true
                    [mail.channel/members]
                        [0]
                            @record
                            .{Test/data}
                            .{Data/currentPartnerId}
                        [1]
                            131
                    [mail.channel/name]
                        Partner 131
                    [mail.channel/public]
                        private
                    [mail.channel/state]
                        open
                [1]
                    [Record/models]
                        res.partner
                    [res.partner/id]
                        131
                    [res.partner/name]
                        Partner 131
                [2]
                    [Record/models]
                        res.users
                    [res.users/id]
                        12
                    [res.users/partner_id]
                        131
            :imSearchDef
                {Record/insert}
                    [Record/models]
                        Deferred
            @testEnv
            .{Record/insert}
                [Record/models]
                    Server
                [Server/data]
                    @record
                    .{Test/data}
                [Server/mockRPC]
                    {Record/insert}
                        [Record/models]
                            Function
                        [Function/in]
                            route
                            args
                            original
                        [Function/out]
                            :res
                                @original
                            {if}
                                @args
                                .{Dict/get}
                                    method
                                .{=}
                                    im_search
                            .{then}
                                {Deferred/resolve}
                                    @imSearchDef
                            @res
            @testEnv
            .{Record/insert}
                []
                    [Record/models]
                        ChatWindowManagerComponent
                []
                    [Record/models]
                        MessagingMenuComponent
            {Dev/comment}
                open "new message" chat window
            @testEnv
            .{Component/afterNextRender}
                @testEnv
                .{UI/click}
                    @testEnv
                    .{MessagingMenu/messagingMenuComponents}
                    .{Collection/first}
                    .{MessagingMenuComponent/toggler}
            @testEnv
            .{Component/afterNextRender}
                @testEnv
                .{UI/click}
                    @testEnv
                    .{MessagingMenu/messagingMenuComponents}
                    .{Collection/first}
                    .{MessagingMenuComponent/newMessageButton}
            {Dev/comment}
                search for a user in "new message" autocomplete
            @testEnv
            .{UI/insertText}
                131
            @testEnv
            .{UI/keydown}
                @testEnv
                .{ChatWindowManager/newMessageChatWindow}
                .{ChatWindow/chatWindowComponents}
                .{Collection/first}
                .{ChatWindowComponent/newMessageFormInput}
            @testEnv
            .{UI/keyup}
                @testEnv
                .{ChatWindowManager/newMessageChatWindow}
                .{ChatWindow/chatWindowComponents}
                .{Collection/first}
                .{ChatWindowComponent/newMessageFormInput}
            {Dev/comment}
                Wait for search RPC to be resolved. The following await lines are
                necessary because autocomplete is an external lib therefore it is
                not possible to use 'afterNextRender'.
            {Promise/await}
                @imSearchDef
            {Utils/nextAnimationFrame}
            @testEnv
            .{Component/afterNextRender}
                @testEnv
                .{UI/click}
                    .ui-autocomplete
                    .ui-menu-item
                    a
            {Test/assert}
                []
                    @testEnv
                    .{ChatWindowManager/newMessageChatWindow}
                    .{isFalsy}
                []
                    'new message' chat window should not be there
            {Test/assert}
                []
                    @testEnv
                    .{ChatWindowManager/chatWindows}
                    .{Collection/length}
                    .{=}
                        1
                []
                    should have only one chat window after selecting user whose chat is already open
`;
