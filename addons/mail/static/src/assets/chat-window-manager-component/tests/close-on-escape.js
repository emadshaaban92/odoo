/** @odoo-module **/

import { Define } from '@mail/define';

export default Define`
    {Record/insert}
        [Record/models]
            Test
        [Test/name]
            close on ESCAPE
        [Test/model]
            ChatWindowManagerComponent
        [Test/assertions]
            10
        [Test/scenario]
            :testEnv
                {Record/insert}
                    [Record/models]
                        Env
            {Dev/comment}
                a chat window with thread is expected to be initially open for
                this test
            @testEnv
            .{Record/insert}
                [0]
                    [Record/models]
                        mail.channel
                    [mail.channel/is_minimized]
                        true
                [1]
                    {Dev/comment}
                        expected partner to be found by mention during
                        the test
                    [Record/models]
                        res.partner
                    [res.partner/name]
                        TestPartner
            @testEnv
            .{Record/insert}
                [Record/models]
                    Server
                [Server/data]
                    @record
                    .{Test/data}
                [Server/mockRPC]
                    {Record/insert}
                        [Record/models]
                            Function
                        [Function/in]
                            route
                            args
                            original
                        [Function/out]
                            {if}
                                @args
                                .{Dict/get}
                                    method
                                .{=}
                                    channel_fold
                            .{then}
                                {Test/step}
                                    rpc:channel_fold/
                                    .{+}
                                        @args
                                        .{Dict/get}
                                            kwargs
                                        .{Dict/get}
                                            state
                            @original
            @testEnv
            .{Record/insert}
                [Record/models]
                    ChatWindowManagerComponent
            {Test/assert}
                []
                    @testEnv
                    .{ChatWindowManager/chatWindowManagerComponents}
                    .{Collection/first}
                    .{ChatWindowManagerComponent/chatWindow}
                    .{Collection/length}
                    .{=}
                        1
                []
                    chat window should be opened initially

            @testEnv
            .{Component/afterNextRender}
                @testEnv
                .{UI/click}
                    @testEnv
                    .{ChatWindowManager/chatWindows}
                    .{Collection/first}
                    .{ChatWindow/thread}
                    .{Thread/composer}
                    .{Composer/composerViewComponents}
                    .{Collection/first}
                    .{ComposerViewComponent/buttonEmojis}
            {Test/assert}
                []
                    @testEnv
                    .{Record/all}
                        [Record/models]
                            EmojiListComponent
                    .{Collection/length}
                    .{=}
                        1
                []
                    emoji list should be opened after click on emojis button

            @testEnv
            .{Component/afterNextRender}
                @testEnv
                .{UI/keydown}
                    [0]
                        @testEnv
                        .{ChatWindowManager/chatWindows}
                        .{Collection/first}
                        .{ChatWindow/thread}
                        .{Thread/composer}
                        .{Composer/composerViewComponents}
                        .{Collection/first}
                        .{ComposerViewComponent/buttonEmojis}
                    [1]
                        [bubbles]
                            true
                        [key]
                            Escape
            {Test/assert}
                []
                    @testEnv
                    .{Record/all}
                        [Record/models]
                            EmojiListComponent
                    .{Collection/length}
                    .{=}
                        0
                []
                    emoji list should be closed after pressing escape on emojis button
            {Test/assert}
                []
                    @testEnv
                    .{ChatWindowManager/chatWindowManagerComponents}
                    .{Collection/first}
                    .{ChatWindowManagerComponent/chatWindow}
                    .{Collection/length}
                    .{=}
                        1
                []
                    chat window should still be opened after pressing escape on emojis button

            @testEnv
            .{Component/afterNextRender}
                @testEnv
                .{UI/focus}
                    @testEnv
                    .{ChatWindowManager/chatWindows}
                    .{Collection/first}
                    .{ChatWindow/thread}
                    .{Thread/composer}
                    .{Composer/composerTextInputComponents}
                    .{Collection/first}
                    .{ComposerTextInputComponent/textarea}
                @testEnv
                .{UI/insertText}
                    @
                @testEnv
                .{UI/keydown}
                    @testEnv
                    .{ChatWindowManager/chatWindows}
                    .{Collection/first}
                    .{ChatWindow/thread}
                    .{Thread/composer}
                    .{Composer/composerTextInputComponents}
                    .{Collection/first}
                    .{ComposerTextInputComponent/textarea}
                @testEnv
                .{UI/keyup}
                    @testEnv
                    .{ChatWindowManager/chatWindows}
                    .{Collection/first}
                    .{ChatWindow/thread}
                    .{Thread/composer}
                    .{Composer/composerTextInputComponents}
                    .{Collection/first}
                    .{ComposerTextInputComponent/textarea}
            {Test/assert}
                []
                    @testEnv
                    .{ComposerSuggestionListComponent/all}
                    .{Collection/length}
                    .{=}
                        1
                []
                    should display mention suggestions on typing '@'

            @testEnv
            .{Component/afterNextRender}
                @testEnv
                .{UI/keydown}
                    [0]
                        @testEnv
                        .{ChatWindowManager/chatWindows}
                        .{Collection/first}
                        .{ChatWindow/thread}
                        .{Thread/composer}
                        .{Composer/composerTextInputComponents}
                        .{Collection/first}
                        .{ComposerTextInputComponent/textarea}
                    [1]
                        [bubbles]
                            true
                        [key]
                            Escape
            {Test/assert}
                []
                    @testEnv
                    .{ChatWindowManager/chatWindows}
                    .{Collection/first}
                    .{ChatWindow/thread}
                    .{Thread/composer}
                    .{Composer/composerTextInputComponents}
                    .{Collection/first}
                    .{ComposerTextInputComponent/suggestionList}
                    .{ComposerSuggestionListComponent/list}
                    .{isFalsy}
                []
                    mention suggestion should be closed after pressing escape on mention suggestion
            {Test/assert}
                []
                    @testEnv
                    .{ChatWindowManager/chatWindowManagerComponents}
                    .{Collection/first}
                    .{ChatWindowManagerComponent/chatWindow}
                    .{Collection/length}
                    .{=}
                        1
                []
                    chat window should still be opened after pressing escape on mention suggestion

            @testEnv
            .{Component/afterNextRender}
                @testEnv
                .{UI/keydown}
                    [0]
                        @testEnv
                        .{ChatWindowManager/chatWindows}
                        .{Collection/first}
                        .{ChatWindow/thread}
                        .{Thread/composer}
                        .{Composer/composerTextInputComponents}
                        .{Collection/first}
                        .{ComposerTextInputComponent/textarea}
                    [1]
                        [bubbles]
                            true
                        [key]
                            Escape
            {Test/assert}
                []
                    @testEnv
                    .{ChatWindowManager/chatWindowManagerComponents}
                    .{Collection/first}
                    .{ChatWindowManagerComponent/chatWindow}
                    .{Collection/length}
                    .{=}
                        0
                []
                    chat window should be closed after pressing escape if there was no other priority escape handler
            {Test/verifySteps}
                rpc:channel_fold/closed
`;
