/** @odoo-module **/

import { Define } from '@mail/define';

export default Define`
    {Dev/comment}
        Post a message in provided composer's thread based on current composer fields values.
    {Record/insert}
        [Record/models]
            Action
        [Action/name]
            ComposerView/postMessage
        [Action/params]
            record
                [type]
                    ComposerView
        [Action/behavior]
            :composer
                @record
                .{ComposerView/composer}
            {if}
                @composer
                .{Composer/thread}
                .{Thread/model}
                .{=}
                    mail.channel
            .{then}
                :command
                    {ComposerView/_getCommandFromText}
                        [0]
                            @record
                        [1]
                            @composer
                            .{Composer/textInputContent}
                {if}
                    @command
                .{then}
                    {ChannelCommand/execute}
                        [0]
                            @command
                        [1]
                            [channel]
                                @composer
                                .{Composer/thread}
                            [body]
                                @composer
                                .{Composer/textInputContent}
                    {if}
                        {Record/exists}
                            @composer
                    .{then}
                        {Composer/._reset}
                            @composer
                    {break}
            {if}
                {Env/currentPartner}
            .{then}
                {Thread/unregisterCurrentPartnerIsTyping}
                    [0]
                        @composer
                        .{Composer/thread}
                    [1]
                        [immediateNotify]
                            true
            :escapedAndCompactContent
                {Utils/escapeAndCompactTextContent}
                    @composer
                    .{Composer/textInputContent}
            :body
                @escapedAndCompactContent
                .{String/replace}
                    [0]
                        /&nbsp;/g
                    [1]
                        {String/whitespace}
                .{String/trim}
            {Dev/comment}
                This message will be received from the mail composer as html content
                subtype but the urls will not be linkified. If the mail composer
                takes the responsibility to linkify the urls we end up with double
                linkification a bit everywhere. Ideally we want to keep the content
                as text internally and only make html enrichment at display time but
                the current design makes this quite hard to do.
            :body
                {ComposerView/_generateMentionsLinks}
                    @body
            :body
                {Utils/parseAndTransform}
                    [0]
                        @body
                    [1]
                        addLink
            :body
                {ComposerView/_generateEmojisOnHtml}
                    [0]
                        @record
                    [1]
                        @body
            :postData
                {Record/insert}
                    [Record/models]
                        Object
                    [attachment_ids]
                        @composer
                        .{Composer/attachments}
                        .{Collection/map}
                            {Record/insert}
                                [Record/models]
                                    Function
                                [Function/in]
                                    attachment
                                [Function/out]
                                    @attachment
                                    .{Attachment/id}
                    [body]
                        @body
                    [message_type]
                        comment
                    [partner_ids]
                        @composer
                        .{Composer/recipients}
                        .{Collection/map}
                            {Record/insert}
                                [Record/models]
                                    Function
                                [Function/in]
                                    partner
                                [Function/out]
                                    @partner
                                    .{Partner/id}
            :params
                {Record/insert}
                    [Record/models]
                        Object
                    [post_data]
                        @postData
                    [thread_id]
                        @composer
                        .{Composer/thread}
                        .{Thread/id}
                    [thread_model]
                        @composer
                        .{Composer/thread}
                        .{Thread/model}
            {try}
                {Record/update}
                    [0]
                        @composer
                    [1]
                        [Composer/isPostingMessage]
                            true
                {if}
                    @composer
                    .{Composer/thread}
                    .{Thread/model}
                    .{=}
                        mail.channel
                .{then}
                    {Record/update}
                        [0]
                            @postData
                        [1]
                            [subtype_xmlid]
                                mail.mt_comment
                .{else}
                    {Record/update}
                        [0]
                            @postData
                        [1]
                            [subtype_xmlid]
                                {if}
                                    @composer
                                    .{Composer/isLog}
                                .{then}
                                    mail.mt_note
                                .{else}
                                    mail.mt_comment
                    {if}
                        @composer
                        .{Composer/isLog}
                        .{isFalsy}
                    .{then}
                        {Record/update}
                            [0]
                                @params
                            [1]
                                [context]
                                    [mail_post_autofollow]
                                        true
                {if}
                    @record
                    .{ComposerView/threadView}
                    .{&}
                        @record
                        .{ComposerView/threadView}
                        .{ThreadView/replyingToMessageView}
                    .{&}
                        @record
                        .{ComposerView/threadView}
                        .{ThreadView/thread}
                        .{!=}
                            {Env/inbox}
                .{then}
                    {Record/update}
                        [0]
                            @postData
                        [1]
                            [parent_id]
                                @record
                                .{ComposerView/threadView}
                                .{ThreadView/replyingToMessageView}
                                .{MessageView/message}
                                .{Message/id}
                :messageData
                    @env
                    .{Env/owlEnv}
                    .{Dict/get}
                        services
                    .{Dict/get}
                        rpc
                    .{Function/call}
                        [route]
                            /mail/message/post
                        [params]
                            @params
                :message
                    {Record/insert}
                        [Record/models]
                            Message
                        {Message/convertData}
                            @messageData
                {foreach}
                    @message
                    .{Message/originThread}
                    .{Thread/threadViews}
                .{as}
                    threadView
                .{do}
                    {Dev/comment}
                        Reset auto scroll to be able to see the newly posted message.
                    {Record/update}
                        [0]
                            @threadView
                        [1]
                            [ThreadView/hasAutoScrollOnMessageReceived]
                                true
                {if}
                    @record
                    .{ComposerView/chatter}
                    .{Chatter/thread}
                .{then}
                    {if}
                        {Record/exists}
                            @record
                    .{then}
                        {Record/delete}
                            @record
                    {if}
                        {Record/exists}
                            @record
                            .{ComposerView/chatter}
                            .{Chatter/thread}
                    .{then}
                        {Thread/fetchData}
                            [0]
                                @record
                                .{ComposerView/chatter}
                                .{Chatter/thread}
                            [1]
                                followers
                                suggestedRecipients
                {if}
                    @record
                    .{ComposerView/chatter}
                    .{Chatter/thread}
                .{then}
                    {if}
                        @record
                        .{ComposerView/chatter}
                        .{Chatter/thread}
                        .{=}
                            {Env/inbox}
                    .{then}
                        {if}
                            {Record/exists}
                                @record
                        .{then}
                            {Record/delete}
                                @record
                    @env
                    .{Env/owlEnv}
                    .{Dict/get}
                        services
                    .{Dict/get}
                        notification
                    .{Dict/get}
                        notify
                    .{Function/call}
                        [message]
                            {String/sprintf}
                                [0]
                                    {Locale/text}
                                        Message posted on "%s
                                [1]
                                    @message
                                    .{Message/originThread}
                                    .{Thread/displayName}
                        [type]
                            info
                {if}
                    @discussAsReplying
                    .{&}
                        {Record/exists}
                            @discussAsReplying
                .{then}
                    {Discuss/clearReplyingToMessage}
                        @discussAsReplying
                {if}
                    {Record/exists}
                        @composer
                .{then}
                    {Composer/_reset}
                        @composer
            .{finally}
                {if}
                    {Record/exists}
                        @composer
                .{then}
                    {Record/update}
                        [0]
                            @composer
                        [1]
                            [Composer/isPostingMessage]
                                false
`;
