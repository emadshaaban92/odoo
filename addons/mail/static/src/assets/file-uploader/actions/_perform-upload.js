/** @odoo-module **/

import { Define } from '@mail/define';

export default Define`
    {Record/insert}
        [Record/models]
            Action
        [Action/name]
            FileUploader/_performUpload
        [Action/params]
            files
                [type]
                    web.FileList
                    .{|}
                        Array
            record
                [type]
                    FileUploader
        [Action/behavior]
            :composer
                @record
                .{FileUploader/composerView}
                .{&}
                    @record
                    .{FileUploader/composerView}
                    .{ComposerView/composer}
                    {Dev/comment}
                        save before async
            :thread
                @record
                .{FileUploader/thread}
                {Dev/comment}
                    save before async
            :chatter
                @record
                .{FileUploader/attachmentBoxView}
                .{&}
                    @record
                    .{FileUploader/attachmentBoxView}
                    .{AttachmentBoxView/chatter}
                    {Dev/comment}
                        save before async
            :activity
                @record
                .{FileUploader/activityView}
                .{&}
                    @record
                    .{FileUploader/activityView}
                    .{ActivityView/activity}
                    {Dev/comment}
                        save before async
            :uploadingAttachments
                {Record/insert}
                    [Record/models]
                        Map
            {foreach}
                @files
            .{as}
                file
            .{do}
                {Map/set}
                    [0]
                        @uploadingAttachments
                    [1]
                        @file
                    [2]
                        {Record/insert}
                            [Record/models]
                                Attachment
                            []
                uploadingAttachments.set(file, this.messaging.models['Attachment'].insert({
                    [Attachment/composer]
                        @composer
                    [Attachment/filename]
                        @file
                        .{web.File/name}
                    [Attachment/id]
                        {FileUploader/getAttachmentNextTemporaryId}
                    [Attachment/isUploading]
                        true
                    [Attachment/mimetype]
                        @file
                        .{web.File/type}
                    [Attachment/name]
                        @file
                        .{web.File/name}
                    [Attachment/originThread]
                        {if}
                            @composer
                            .{isFalsy}
                            .{&}
                                @thread
                        .{then}
                            @thread
            :attachments
                {Record/insert}
                    [Record/models]
                        Array
            {foreach}
                @files
            .{as}
                file
            .{do}
                :uploadingAttachment
                    {Map/get}
                        [0]
                            @uploadingAttachments
                        [1]
                            @file
                {if}
                    {Record/exists}
                        @uploadingAttachment
                    .{isFalsy}
                .{then}
                    {Dev/comment}
                        This happens when a pending attachment is being deleted by user before upload.
                    {continue}
                {if}
                    @composer
                    .{&}
                        {Record/exists}
                            @composer
                        .{isFalsy}
                    .{|}
                        @thread
                        .{&}
                            {Record/exists}
                                @thread
                            .{isFalsy}
                .{then}
                    {break}
                {try}
                    :response
                        {Browser/fetch}
                            [0]
                                /mail/attachment/upload
                            [1]
                                [method]
                                    POST
                                [body]
                                    {FileUploader/_createFormData}
                                        [0]
                                            @record
                                        [composer]
                                            @composer
                                        [file]
                                            @file
                                        [thread]
                                            @thread
                                [signal]
                                    @uploadingAttachment
                                    .{Attachment/uploadingAbortController}
                                    .{web.AbortController/signal}
                    :attachmentData
                        {web.Response/json}
                            @response
                    {if}
                        {Record/exists}
                            @uploadingAttachment
                    .{then}
                        {Record/delete}
                            @uploadingAttachment
                    {if}
                        @composer
                        .{&}
                            {Record/exists}
                                @composer
                            .{isFalsy}
                        .{|}
                            @thread
                            .{&}
                                {Record/exists}
                                    @thread
                                .{isFalsy}
                    .{then}
                        {break}
                    :attachment
                        {FileUploader/_onAttachmentUploaded}
                            [0]
                                @record
                            [attachmentData]
                                @attachmentData
                            [composer]
                                @composer
                            [thread]
                                @thread
                    {Collection/push}
                        [0]
                            @attachments
                        [1]
                            @attachment
                .{catch}
                    {Record/insert}
                        [Record/models]
                            Function
                        [Function/in]
                            e
                        [Function/out]
                            {if}
                                @e
                                .{Error/name}
                                .{!=}
                                    AbortError
                            .{then}
                                {Error/raise}
                                    @e
            {if}
                @chatter
                .{&}
                    {Record/exists}
                        @chatter
                .{&}
                    @chatter
                    .{Chatter/hasParentReloadOnAttachmentsChanged}
            .{then}
                {Chatter/reloadParentView}
                    @chatter
            {if}
                @activity
                .{&}
                    {Record/exists}
                        @activity
            .{then}
                {Activity/markAsDone}
                    [0]
                        @activity
                    [1]
                        [attachments]
                            @attachments
`;
