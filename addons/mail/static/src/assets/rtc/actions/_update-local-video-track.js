/** @odoo-module **/

import { Define } from '@mail/define';

export default Define`
    {Record/insert}
        [Record/models]
            Action
        [Action/name]
            Rtc/_updateLocalVideoTrack
        [Action/params]
            type
                [type]
                    String
                [description]
                    'user-video' or 'display'
            activateVideo
                [type]
                    Boolean
                [description]
                    true if we want to activate the video
            record
                [type]
                    Rtc
        [Action/behavior]
            {if}
                {Rtc/videoTrack}
            .{then}
                {Track/stop}
                    {Rtc/videoTrack}
            {Record/update}
                [0]
                    @record
                [1]
                    [Rtc/sendDisplay]
                        false
                    [Rtc/sendUserVideo]
                        false
                    [Rtc/videoTrack]
                        {Record/empty}
            let videoStream;
            {if}
                @activateVideo
                .{isFalsy}
            .{then}
                {if}
                    @type
                    .{=}
                        display
                .{then}
                    {SoundEffect/play}
                        {SoundEffects/screenSharing}
                {break}
            {try}
                {if}
                    @type
                    .{=}
                        user-video
                .{then}
                    :videoStream
                        {MediaDevices/getUserMedia}
                            [0]
                                {web.Browser/navigator}
                                .{web.Navigator/mediaDevices}
                            [1]
                                [video]
                                    {Rtc/videoConfig}
                {if}
                    @type
                    .{=}
                        display
                .{then}
                    :videoStream
                        {MediaDevices/getDisplayMedia}
                            [0]
                                {web.Browser/navigator}
                                .{web.Navigator/mediaDevices}
                            [1]
                                [video]
                                    {Rtc/videoConfig}
                    {SoundEffect/play}
                        {SoundEffects/screenSharing}
            .{catch}
                {Record/insert}
                    [Record/models]
                        Function
                    [Function/in]
                        error
                    [Function/out]
                        @env
                        .{Env/owlEnv}
                        .{Dict/get}
                            services
                        .{Dict/get}
                            notification
                        .{Dict/get}
                            notify
                        .{Function/call}
                            [message]
                                {String/sprintf}
                                    [0]
                                        "%s" requires "%s" access
                                    [1]
                                        {web.Browser/location}
                                        .{web.Location/host}
                                    [2]
                                        {if}
                                            type
                                            .{=}
                                                user-video
                                        .{then}
                                            camera
                                        .{else}
                                            display
                            [type]
                                warning
                        {break}
            :videoTrack
                {if}
                    @videoStream
                .{then}
                    {MediaStream/getVideoTracks}
                        @videoStream
                    .{Collection/first}
                .{else}
                    undefined
            {if}
                @videoTrack
            .{then}
                {Track/addEventListener}
                    [0]
                        @videoTrack
                    [1]
                        ended
                    [2]
                        {Record/doAsync}
                            [0]
                                @record
                            [1]
                                {Rtc/_toggleVideoBroadcast}
                                    [force]
                                        false
                                    [type]
                                        @type
            {Record/update}
                [0]
                    @record
                [1]
                    [Rtc/videoTrack]
                        @videoTrack
                    [Rtc/sendUserVideo]
                        @type
                        .{=}
                            user-video
                        .{&}
                            @videoTrack
                            .{isTruthy}
                    [Rtc/sendDisplay]
                        @type
                        .{=}
                            display
                        .{&}
                            @videoTrack
                            .{isTruthy}
`;
