/** @odoo-module **/

import { Define } from '@mail/define';

export default Define`
    {Record/insert}
        [Record/models]
            Action
        [Action/name]
            Rtc/updateLocalAudioTrack
        [Action/params]
            audio
                [type]
                    Boolean
            record
                [type]
                    Rtc
        [Action/behavior]
            {if}
                {Rtc/audioTrack}
            .{then}
                {Track/stop}
                    {Rtc/audioTrack}
            {Record/update}
                [0]
                    @record
                [1]
                    [Rtc/audioTrack]
                        {Record/empty}
            {if}
                {Rtc/channel}
                .{isFalsy}
            .{then}
                {break}
            {if}
                @audio
            .{then}
                {try}
                    :audioStream
                        {web.Browser/navigator}
                        .{web.Navigator/mediaDevices}
                        .{web.MediaDevices/getUserMedia}
                            [audio]
                                {UserSession/getAudioConstraints}
                                    {Env/userSetting}
                    :audioTrack
                        {AudioStream/getAudioTracks}
                            @audioStream
                        .{Collection/first}
                .{catch}
                    {Record/insert}
                        [Record/models]
                            Function
                        [Function/in]
                            error
                        [Function/out]
                            @env
                            .{Env/owlEnv}
                            .{Dict/get}
                                services
                            .{Dict/get}
                                notification
                            .{Dict/get}
                                notify
                            .{Function/call}
                                [message]
                                    {String/sprintf}
                                        [0]
                                            {Locale/text}
                                                "%s" requires microphone access
                                        [1]
                                            {web.Browser/location}
                                            .{web.Location/host}
                                [type]
                                    warning
                            {if}
                                {Rtc/currentRtcSession}
                            .{then}
                                {RtcSession/updateAndBroadcast}
                                    [0]
                                        {Rtc/currentRtcSession}
                                    [1]
                                        [isSelfMuted]
                                            true
                            {break}
                {if}
                    {Rtc/currentRtcSession}
                    .{isFalsy}
                .{then}
                    {Dev/comment}
                        The getUserMedia promise could resolve when the call is
                        ended in which case the track is no longer relevant.
                    {MediaStreamTrack/stop}
                        @audioTrack
                    {break}
                {AudioTrack/addEventListener}
                    [0]
                        @audioTrack
                    [1]
                        ended
                    [2]
                        {Dev/comment}
                            this mostly happens when the user retracts
                            microphone permission.
                        {Record/doAsync}
                            [0]
                                @record
                            [1]
                                {Rtc/updateLocalAudioTrack}
                                    false
                        {RtcSession/updateAndBroadcast}
                            [0]
                                {Rtc/currentRtcSession}
                            [1]
                                [isSelfMuted]
                                    true
                        {Record/doAsync}
                            [0]
                                @record
                            [1]
                                {Rtc/_updateLocalAudioTrackEnabledState}
                {RtcSession/updateAndBroadcast}
                    [0]
                        {Rtc/currentRtcSession}
                    [1]
                        [isSelfMuted]
                            false
                {Record/update}
                    [0]
                        @audioTrack
                    [1]
                        [AudioTrack/enabled]
                            {Rtc/currentRtcSession}
                            .{RtcSession/isMute}
                            .{isFalsy}
                            .{&}
                                {Rtc/currentRtcSession}
                                .{RtcSession/isTalking}
                {Record/update}
                    [0]
                        @record
                    [1]
                        [Rtc/audioTrack]
                            @audioTrack
                {Record/doAsync}
                    [0]
                        @record
                    [1]
                        {Rtc/updateVoiceActivation}
                {foreach}
                    {Rtc/_peerConnections}
                .{as}
                    item
                .{do}
                    :token
                        @item
                        .{Collection/first}
                    :peerConnection
                        @item
                        .{Collection/second}
                    {Rtc/_updateRemoteTrack}
                        @peerConnection
                        audio
                        [token]
                            @token
`;
