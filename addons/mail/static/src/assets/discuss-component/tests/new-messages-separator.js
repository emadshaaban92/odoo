/** @odoo-module **/

import { Define } from '@mail/define';

export default Define`
    {Record/insert}
        [Record/models]
            Test
        [Test/name]
            new messages separator
        [Test/model]
            DiscussComponent
        [Test/isFocusRequired]
            true
        [Test/assertions]
            6
        [Test/scenario]
            {Dev/comment}
                this test requires several messages so that the last message is not
                visible. This is necessary in order to display 'new messages' and not
                remove from DOM right away from seeing last message.
                AKU TODO: thread specific test
                channel expected to be rendered, with a random unique id that will be
                referenced in the test and the seen_message_id value set to last message
            :testEnv
                {Record/insert}
                    [Record/models]
                        Env
            @testEnv
            .{Record/insert}
                [0]
                    [Record/models]
                        mail.channel
                    [mail.channel/id]
                        20
                    [mail.channel/seen_message_id]
                        125
                    [mail.channel/uuid]
                        randomuuid
                [1]
                    {Dev/comment}
                        Needed partner & user to allow simulation of
                        message reception
                    [Record/models]
                        res.partner
                    [res.partner/id]
                        11
                    [res.partner/name]
                        Foreigner partner
                [2]
                    [Record/models]
                        res.users
                    [res.users/id]
                        42
                    [res.users/name]
                        Foreigner user
                    [res.users/partner_id]
                        11
                {foreach}
                    {Record/insert}
                        [Record/models]
                            Range
                        [start]
                            i
                        [end]
                            26
                .{as}
                    i
                .{do}
                    {entry}
                        [Record/models]
                            mail.message
                        [mail.message/body]
                            not empty
                        [mail.message/id]
                            100
                            .{+}
                                i
                                {Dev/comment}
                                    for setting proper value for seen_message_id
                        [mail.message/model]
                            mail.channel
                        [mail.message/res_id]
                            20
            @testEnv
            .{UI/waitUntilEvent}
                [eventName]
                    o-component-message-list-scrolled
                [message]
                    should wait until channel 20 scrolled to its last message initially
                [predicate]
                    {Record/insert}
                        [Record/models]
                            Function
                        [Function/in]
                            scrollTop
                            thread
                        [Function/out]
                            @thread
                            .{Thread/model}
                            .{=}
                                mail.channel
                            .{&}
                                @thread
                                .{Thread/id}
                                .{=}
                                    20
                            .{&}
                                @scrollTop
                                .{=}
                                    @thread
                                    .{Thread/threadViews}
                                    .{Collection/first}
                                    .{ThreadView/messageListComponents}
                                    .{Collection/first}
                                    .{web.Element/scrollHeight}
                                    .{-}
                                        @thread
                                        .{Thread/threadViews}
                                        .{Collection/first}
                                        .{ThreadView/messageListComponents}
                                        .{Collection/first}
                                        .{web.Element/clientHeight}
            @testEnv
            .{Record/insert}
                [Record/models]
                    Server
                [Server/data]
                    @record
                    .{Test/data}
            @testEnv
            .{Record/insert}
                [Record/models]
                    DiscussComponent
            @testEnv
            .{Thread/open}
                @testEnv
                .{Record/findById}
                    [Thread/id]
                        20
                    [Thread/model]
                        mail.channel
            {Test/assert}
                []
                    @testEnv
                    .{Discuss/thread}
                    .{Thread/cache}
                    .{ThreadCache/messages}
                    .{Collection/length}
                    .{=}
                        25
                []
                    should have 25 messages
            {Test/assert}
                []
                    @testEnv
                    .{Discuss/thread}
                    .{Thread/threadViews}
                    .{Collection/first}
                    .{ThreadView/messageListComponents}
                    .{Collection/first}
                    .{MessageListComponent/separatorNewMessages}
                []
                    should not display 'new messages' separator

            {Dev/comment}
                scroll to top
            @testEnv
            .{UI/afterEvent}
                [eventName]
                    o-component-message-list-scrolled
                [func]
                    @testEnv
                    .{Record/update}
                        [0]
                            @testEnv
                            .{Discuss/thread}
                            .{Thread/threadViews}
                            .{Collection/first}
                            .{ThreadView/messageListComponents}
                            .{Collection/first}
                        [1]
                            [web.Element/scrollTop]
                                0
                [message]
                    should wait until channel scrolled to top
                [predicate]
                    {Record/insert}
                        [Record/models]
                            Function
                        [Function/in]
                            scrollTop
                            thread
                        [Function/out]
                            @thread
                            .{Thread/model}
                            .{=}
                                mail.channel
                            .{&}
                                @thread
                                .{Thread/id}
                                .{=}
                                    20
                            .{&}
                                @scrollTop
                                .{=}
                                    0
            {Dev/comment}
                composer is focused by default, we remove that focus
            @testEnv
            .{UI/blur}
                @testEnv
                .{Discuss/thread}
                .{Thread/composer}
                .{Composer/composerTextInputComponents}
                .{Collection/first}
                .{ComposerTextInputComponent/textarea}
            {Dev/comment}
                simulate receiving a message
            @testEnv
            .{Component/afterNextRender}
                @testEnv
                .{Env/owlEnv}
                .{Dict/get}
                    rpc
                .{Function/call}
                    [route]
                        /mail/chat_post
                    [params]
                        [context]
                            [mockedUserId]
                                42
                        [message_content]
                            hu
                        [uuid]
                            randomuuid
            {Test/assert}
                []
                    @testEnv
                    .{Discuss/thread}
                    .{Thread/cache}
                    .{ThreadCache/messages}
                    .{Collection/length}
                    .{=}
                        26
                []
                    should have 26 messages
            {Test/assert}
                []
                    @testEnv
                    .{Discuss/thread}
                    .{Thread/threadViews}
                    .{Collection/first}
                    .{ThreadView/messageListComponents}
                    .{Collection/first}
                    .{MessageListComponent/separatorNewMessages}
                []
                    should display 'new messages' separator
            @testEnv
            .{UI/afterEvent}
                [eventName]
                    o-component-message-list-scrolled
                [func]
                    @testEnv
                    .{Record/update}
                        [0]
                            @testEnv
                            .{Discuss/thread}
                            .{Thread/threadViews}
                            .{Collection/first}
                            .{ThreadView/messageListComponents}
                            .{Collection/first}
                        [1]
                            [web.Element/scrollTop]
                                @testEnv
                                .{Discuss/thread}
                                .{Thread/threadViews}
                                .{Collection/first}
                                .{ThreadView/messageListComponents}
                                .{Collection/first}
                                .{web.Element/scrollHeight}
                                .{-}
                                    @testEnv
                                    .{Discuss/thread}
                                    .{Thread/threadViews}
                                    .{Collection/first}
                                    .{ThreadView/messageListComponents}
                                    .{Collection/first}
                                    .{web.Element/clientHeight}
                [message]
                    should wait until channel scrolled to bottom
                [predicate]
                    {Record/insert}
                        [Record/models]
                            Function
                        [Function/in]
                            scrollTop
                            thread
                        [Function/out]
                            @thread
                            .{Thread/model}
                            .{=}
                                mail.channel
                            .{&}
                                @thread
                                .{Thread/id}
                                .{=}
                                    20
                            .{&}
                                @scrollTop
                                .{=}
                                    @thread
                                    .{Thread/threadViews}
                                    .{Collection/first}
                                    .{ThreadView/messageListComponents}
                                    .{Collection/first}
                                    .{web.Element/scrollHeight}
                                    .{-}
                                        @thread
                                        .{Thread/threadViews}
                                        .{Collection/first}
                                        .{ThreadView/messageListComponents}
                                        .{Collection/first}
                                        .{web.Element/clientHeight}
            {Test/assert}
                []
                    @testEnv
                    .{Discuss/thread}
                    .{Thread/threadViews}
                    .{Collection/first}
                    .{ThreadView/messageListComponents}
                    .{Collection/first}
                    .{MessageListComponent/separatorNewMessages}
                []
                    should still display 'new messages' separator as composer is not focused

            @testEnv
            .{Component/afterNextRender}
                @testEnv
                .{UI/focus}
                    @testEnv
                    .{Discuss/thread}
                    .{Thread/composer}
                    .{Composer/composerTextInputComponents}
                    .{Collection/first}
                    .{ComposerTextInputComponent/textarea}
            {Test/assert}
                []
                    @testEnv
                    .{Discuss/thread}
                    .{Thread/threadViews}
                    .{Collection/first}
                    .{ThreadView/messageListComponents}
                    .{Collection/first}
                    .{MessageListComponent/separatorNewMessages}
                    .{isFalsy}
                []
                    should no longer display 'new messages' separator (message seen)
`;
